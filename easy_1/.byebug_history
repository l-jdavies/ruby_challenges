exit
990 % 100
990 % 500
990 / 500
roman_str
input
n
roman_str
n
division
n
division = input / decimal
input
roman_num
decimal
exit
sum == num
n
sum
exit
@trinary_characters
exit
"234abc".chars.map(&:to_i)
"234abc".chars
@octal_digits
n
@octal_digits.map(&:to_s).any? { |el| el.match(/[89]/) }
@octal_digits.map(&:to_s).any? { |el| el.match(/[89]/)
@octal_digits.map(&:to_s).any? { 
@octal_digits
exit
@counter
unmarked_multiples
n
unmarked_keys.select { |key| key % @counter == 0 unless key == @counter }
unmarked_keys.select { |key| key % @counter == 0 unless key == @ counter }
exit
select_unmarked_keys
select_unmarked_key
n
unmarked_multiples
@max_number
@counter
n
unmarked_multiples
n
@number_hash
n
unmarked_multiples
n
@number_hash
@counter
exit
@number_hash
n
@counter
unmarked_multiples
n
@counter
n
@number_hash
@numbers_hash
unmarked_multiples
n
@counter
unmarked_multiples
exit
@counter
@number_hash
unmarked_multiples
n
@counter
n
step
n
unmarked_multiples
exit
unmarked_multiples
exit
step
n
unmarked_multiples
exit
n
@counter
n
@number_hash
n
@counter
n
unmarked_multiples
n
unmarked_keys.select { |key| key % @counter == 0 }
n
select_unmarked_keys
unmarked_keys
exit
@number_hash.select { |_, v| v == 'unmarked' }.keys
@number_hash.select { |_, v| v == 'unmarked' }
@number_hash.keys
@number_hash
step
select_unmarked_keys
exit
multiple_of_counter
unmarked_multiples
exit
str_copy.slice(/\d{\n}/)
exit
slices_arr
n
str_copy.slice(/\d{3}/)
str_copy
str_copy.slice(/\d{n}/)
